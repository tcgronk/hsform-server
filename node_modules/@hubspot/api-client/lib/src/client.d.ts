/// <reference types="node" />
import Bottleneck from 'bottleneck';
import http = require('http');
import request = require('request');
import { DefaultApi as AuditLogsDefaultApi } from '../codegen/cms/audit_logs/api';
import * as auditLogsModels from '../codegen/cms/audit_logs/model/models';
import { DomainsApi } from '../codegen/cms/domains/api';
import * as domainsModels from '../codegen/cms/domains/model/models';
import { DefaultApi as PerformanceDefaultApi } from '../codegen/cms/performance/api';
import * as performanceModels from '../codegen/cms/performance/model/models';
import { DefaultApi as SiteSearchDefaultApi } from '../codegen/cms/site_search/api';
import * as siteSearchModels from '../codegen/cms/site_search/model/models';
import { RedirectsApi } from '../codegen/cms/url_redirects/api';
import * as urlRedirectsModels from '../codegen/cms/url_redirects/model/models';
import { BatchApi as AssociationsBatchApi, TypesApi } from '../codegen/crm/associations/api';
import * as associationsModels from '../codegen/crm/associations/model/models';
import { AssociationsApi as CompaniesAssociationsApi, BasicApi as CompaniesBasicApi, BatchApi as CompaniesBatchApi, SearchApi as CompaniesSearchApi } from '../codegen/crm/companies/api';
import * as companiesModels from '../codegen/crm/companies/model/models';
import { AssociationsApi as ContactsAssociationsApi, BasicApi as ContactsBasicApi, BatchApi as ContactsBatchApi, SearchApi as ContactsSearchApi } from '../codegen/crm/contacts/api';
import * as contactsModels from '../codegen/crm/contacts/model/models';
import { AssociationsApi as DealsAssociationsApi, BasicApi as DealsBasicApi, BatchApi as DealsBatchApi, SearchApi as DealsSearchApi } from '../codegen/crm/deals/api';
import * as dealsModels from '../codegen/crm/deals/model/models';
import { CardsApi, SampleResponseApi as CardsSampleResponseApi } from '../codegen/crm/extensions/cards/api';
import * as cardsModels from '../codegen/crm/extensions/cards/model/models';
import { CoreApi as ImportsCoreApi } from '../codegen/crm/imports/api/coreApi';
import * as importsModels from '../codegen/crm/imports/model/models';
import { AssociationsApi as LineItemsAssociationsApi, BasicApi as LineItemsBasicApi, BatchApi as LineItemsBatchApi, SearchApi as LineItemsSearchApi } from '../codegen/crm/line_items/api';
import * as lineItemsModels from '../codegen/crm/line_items/model/models';
import { ApiKeyAuth, DefaultApi as OwnersDefaultApi, OAuth } from '../codegen/crm/owners/api';
import * as ownersModels from '../codegen/crm/owners/model/models';
import { PipelinesApi, PipelineStagesApi } from '../codegen/crm/pipelines/api';
import * as pipelinesModels from '../codegen/crm/pipelines/model/models';
import { AssociationsApi as ProductsAssociationsApi, BasicApi as ProductsBasicApi, BatchApi as ProductsBatchApi, SearchApi as ProductsSearchApi } from '../codegen/crm/products/api';
import * as productsModels from '../codegen/crm/products/model/models';
import { BatchApi as PropertiesBatchApi, CoreApi as PropertiesCoreApi, GroupsApi as PropertiesGroupsApi } from '../codegen/crm/properties/api';
import * as propertiesModels from '../codegen/crm/properties/model/models';
import { AssociationsApi as QuotesAssociationsApi, BasicApi as QuotesBasicApi, BatchApi as QuotesBatchApi, SearchApi as QuotesSearchApi } from '../codegen/crm/quotes/api';
import * as quotesModels from '../codegen/crm/quotes/model/models';
import { AssociationsApi as TicketsAssociationsApi, BasicApi as TicketsBasicApi, BatchApi as TicketsBatchApi, SearchApi as TicketsSearchApi } from '../codegen/crm/tickets/api';
import * as ticketsModels from '../codegen/crm/tickets/model/models';
import { EventsApi, TemplatesApi, TokensApi } from '../codegen/crm/timeline/api';
import * as timelineModels from '../codegen/crm/timeline/model/models';
import { DefaultApi as OauthDefaultApi } from '../codegen/oauth/api';
import * as oauthModels from '../codegen/oauth/model/models';
import { SettingsApi, SubscriptionsApi } from '../codegen/webhooks/api';
import * as webhooksModels from '../codegen/webhooks/model/models';
export declare type LimiterOptions = Bottleneck.ConstructorOptions;
export declare enum NumberOfRetries {
    NoRetries = 0,
    One = 1,
    Two = 2,
    Three = 3,
    Four = 4,
    Five = 5,
    Six = 6
}
export declare type Interceptor = (requestOptions: request.Options) => Promise<any> | void;
export { associationsModels, companiesModels, contactsModels, dealsModels, cardsModels, importsModels, lineItemsModels, ownersModels, pipelinesModels, productsModels, propertiesModels, quotesModels, ticketsModels, timelineModels, oauthModels, webhooksModels, auditLogsModels, domainsModels, performanceModels, urlRedirectsModels, siteSearchModels, };
export declare class HttpError extends Error {
    response: http.IncomingMessage;
    body: any;
    statusCode?: number | undefined;
    constructor(response: http.IncomingMessage, body: any, statusCode?: number | undefined);
}
export declare class Client {
    oauth: {
        defaultApi: OauthDefaultApi;
        getAuthorizationUrl: (clientId: string, redirectUri: string, scope: string, optionalScope?: string, state?: string) => string;
    };
    crm: {
        associations: {
            batchApi: AssociationsBatchApi;
            typesApi: TypesApi;
        };
        companies: {
            associationsApi: CompaniesAssociationsApi;
            basicApi: CompaniesBasicApi;
            batchApi: CompaniesBatchApi;
            searchApi: CompaniesSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<companiesModels.SimplePublicObject[]>;
        };
        contacts: {
            associationsApi: ContactsAssociationsApi;
            basicApi: ContactsBasicApi;
            batchApi: ContactsBatchApi;
            searchApi: ContactsSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<contactsModels.SimplePublicObject[]>;
        };
        deals: {
            associationsApi: DealsAssociationsApi;
            basicApi: DealsBasicApi;
            batchApi: DealsBatchApi;
            searchApi: DealsSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<dealsModels.SimplePublicObject[]>;
        };
        extensions: {
            cards: {
                cardsApi: CardsApi;
                sampleResponseApi: CardsSampleResponseApi;
            };
        };
        imports: {
            coreApi: ImportsCoreApi;
        };
        lineItems: {
            associationsApi: LineItemsAssociationsApi;
            basicApi: LineItemsBasicApi;
            batchApi: LineItemsBatchApi;
            searchApi: LineItemsSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<lineItemsModels.SimplePublicObject[]>;
        };
        owners: {
            defaultApi: OwnersDefaultApi;
        };
        pipelines: {
            pipelinesApi: PipelinesApi;
            pipelineStagesApi: PipelineStagesApi;
        };
        products: {
            associationsApi: ProductsAssociationsApi;
            basicApi: ProductsBasicApi;
            batchApi: ProductsBatchApi;
            searchApi: ProductsSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<productsModels.SimplePublicObject[]>;
        };
        properties: {
            batchApi: PropertiesBatchApi;
            coreApi: PropertiesCoreApi;
            groupsApi: PropertiesGroupsApi;
        };
        quotes: {
            associationsApi: QuotesAssociationsApi;
            basicApi: QuotesBasicApi;
            batchApi: QuotesBatchApi;
            searchApi: QuotesSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<quotesModels.SimplePublicObject[]>;
        };
        tickets: {
            associationsApi: TicketsAssociationsApi;
            basicApi: TicketsBasicApi;
            batchApi: TicketsBatchApi;
            searchApi: TicketsSearchApi;
            getAll: (limit?: number, after?: string, properties?: string[], associations?: string[], archived?: boolean, options?: {
                headers: {
                    [name: string]: string;
                };
            }) => Promise<ticketsModels.SimplePublicObject[]>;
        };
        timeline: {
            eventsApi: EventsApi;
            templatesApi: TemplatesApi;
            tokensApi: TokensApi;
        };
    };
    webhooks: {
        settingsApi: SettingsApi;
        subscriptionsApi: SubscriptionsApi;
        validateSignature: (signature: string, clientSecret: string, requestBody: string, signatureVersion?: string, webhooksUrl?: string, webhooksMethod?: string) => boolean;
    };
    cms: {
        auditLogs: {
            defaultApi: AuditLogsDefaultApi;
        };
        domains: {
            domainsApi: DomainsApi;
        };
        performance: {
            defaultApi: PerformanceDefaultApi;
        };
        urlRedirects: {
            redirectsApi: RedirectsApi;
        };
        sireSearch: {
            defaultApi: SiteSearchDefaultApi;
        };
    };
    protected _interceptors: Interceptor[];
    protected _oauthDefaultApi: OauthDefaultApi;
    protected _associationsBatchApi: AssociationsBatchApi;
    protected _typesApi: TypesApi;
    protected _companiesAssociationsApi: CompaniesAssociationsApi;
    protected _companiesBasicApi: CompaniesBasicApi;
    protected _companiesBatchApi: CompaniesBatchApi;
    protected _companiesSearchApi: CompaniesSearchApi;
    protected _contactsAssociationsApi: ContactsAssociationsApi;
    protected _contactsBasicApi: ContactsBasicApi;
    protected _contactsBatchApi: ContactsBatchApi;
    protected _contactsSearchApi: ContactsSearchApi;
    protected _dealsAssociationsApi: DealsAssociationsApi;
    protected _dealsBasicApi: DealsBasicApi;
    protected _dealsBatchApi: DealsBatchApi;
    protected _dealsSearchApi: DealsSearchApi;
    protected _cardsApi: CardsApi;
    protected _cardsSampleResponseApi: CardsSampleResponseApi;
    protected _importsCoreApi: ImportsCoreApi;
    protected _lineItemsAssociationsApi: LineItemsAssociationsApi;
    protected _lineItemsBasicApi: LineItemsBasicApi;
    protected _lineItemsBatchApi: LineItemsBatchApi;
    protected _lineItemsSearchApi: LineItemsSearchApi;
    protected _ownersDefaultApi: OwnersDefaultApi;
    protected _pipelinesApi: PipelinesApi;
    protected _pipelineStagesApi: PipelineStagesApi;
    protected _productsAssociationsApi: ProductsAssociationsApi;
    protected _productsBasicApi: ProductsBasicApi;
    protected _productsBatchApi: ProductsBatchApi;
    protected _productsSearchApi: ProductsSearchApi;
    protected _propertiesBatchApi: PropertiesBatchApi;
    protected _propertiesCoreApi: PropertiesCoreApi;
    protected _propertiesGroupsApi: PropertiesGroupsApi;
    protected _quotesAssociationsApi: QuotesAssociationsApi;
    protected _quotesBasicApi: QuotesBasicApi;
    protected _quotesBatchApi: QuotesBatchApi;
    protected _quotesSearchApi: QuotesSearchApi;
    protected _ticketsAssociationsApi: TicketsAssociationsApi;
    protected _ticketsBasicApi: TicketsBasicApi;
    protected _ticketsBatchApi: TicketsBatchApi;
    protected _ticketsSearchApi: TicketsSearchApi;
    protected _eventsApi: EventsApi;
    protected _templatesApi: TemplatesApi;
    protected _tokensApi: TokensApi;
    protected _settingsApi: SettingsApi;
    protected _subscriptionsApi: SubscriptionsApi;
    protected _auditLogsDefaultApi: AuditLogsDefaultApi;
    protected _siteSearchDefaultApi: SiteSearchDefaultApi;
    protected _domainsApi: DomainsApi;
    protected _performanceDefaultApi: PerformanceDefaultApi;
    protected _redirectsApi: RedirectsApi;
    protected _apiClientsWithApiKeyAuth: any[];
    protected _apiClientsWithDevApiKeyAuth: any[];
    protected _apiClients: any[];
    protected _apiKey: string | undefined;
    protected _developerApiKey: string | undefined;
    protected _basePath: string;
    protected _accessToken: string | undefined;
    protected _defaultHeaders: object | undefined;
    protected authentications: {
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected _limiter: Bottleneck | undefined;
    protected _searchLimiter: Bottleneck | undefined;
    protected _numberOfApiCallRetries: NumberOfRetries;
    protected _useLimiter: boolean;
    protected _useSearchLimiter: boolean;
    protected _limiterOptions: LimiterOptions | undefined;
    protected _searchLimiterOptions: LimiterOptions | undefined;
    constructor(options?: {
        apiKey?: string;
        accessToken?: string;
        basePath?: string;
        defaultHeaders?: object;
        developerApiKey?: string;
        useLimiter?: boolean;
        limiterOptions?: LimiterOptions;
        numberOfApiCallRetries?: NumberOfRetries;
        interceptors?: Interceptor[];
    });
    setApiKey(apiKeyToSet: string): void;
    setDeveloperApiKey(developerApiKeyToSet: string): void;
    setBasePath(basePathToSet?: string): void;
    setAccessToken(accessTokenToSet: string): void;
    addInterceptor(interceptor: Interceptor): void;
    setDefaultHeaders(defaultHeadersToSet?: object): void;
    setAuth(options?: {
        apiKey?: string;
        developerApiKey?: string;
        accessToken?: string;
    }): void;
    getOptions(): {
        basePath: string | undefined;
        defaultHeaders: object | undefined;
        apiKey: string | undefined;
        developerApiKey: string | undefined;
        accessToken: string | undefined;
        useLimiter: boolean;
        limiterOptions: LimiterOptions | undefined;
        numberOfApiCallRetries: NumberOfRetries;
        interceptors: Interceptor[];
    };
    apiRequest(opts: any): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    protected _getAuthorizationUrl(clientId: string, redirectUri: string, scope: string, optionalScope?: string, state?: string): string;
    protected _validateSignature(signature: string, clientSecret: string, requestBody: string, signatureVersion?: string, webhooksUrl?: string, webhooksMethod?: string): boolean;
    private _retrieveGetAllFunction;
    private _setOptions;
    private _setUseQuerystring;
    private _getLimiterWrappedMethod;
    private _getSearchLimiterWrappedMethod;
    private _waitAfterRequestFailure;
    private _getRetryWrappedMethod;
    private _patchApiClientMethod;
    private _patchApiClient;
    private _patchApiClients;
    private _patchApiRequestMethod;
    private _setMethodsPatchOptions;
    private _setInterceptors;
}
