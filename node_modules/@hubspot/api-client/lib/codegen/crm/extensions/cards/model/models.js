"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./actionConfirmationBody"));
__export(require("./actionHookActionBody"));
__export(require("./cardActions"));
__export(require("./cardCreateRequest"));
__export(require("./cardDisplayBody"));
__export(require("./cardDisplayProperty"));
__export(require("./cardFetchBody"));
__export(require("./cardFetchBodyPatch"));
__export(require("./cardListResponse"));
__export(require("./cardObjectTypeBody"));
__export(require("./cardPatchRequest"));
__export(require("./cardResponse"));
__export(require("./displayOption"));
__export(require("./errorDetail"));
__export(require("./iFrameActionBody"));
__export(require("./integratorCardPayloadResponse"));
__export(require("./integratorObjectResult"));
__export(require("./modelError"));
__export(require("./objectToken"));
__export(require("./topLevelActions"));
const actionConfirmationBody_1 = require("./actionConfirmationBody");
const actionHookActionBody_1 = require("./actionHookActionBody");
const cardActions_1 = require("./cardActions");
const cardCreateRequest_1 = require("./cardCreateRequest");
const cardDisplayBody_1 = require("./cardDisplayBody");
const cardDisplayProperty_1 = require("./cardDisplayProperty");
const cardFetchBody_1 = require("./cardFetchBody");
const cardFetchBodyPatch_1 = require("./cardFetchBodyPatch");
const cardListResponse_1 = require("./cardListResponse");
const cardObjectTypeBody_1 = require("./cardObjectTypeBody");
const cardPatchRequest_1 = require("./cardPatchRequest");
const cardResponse_1 = require("./cardResponse");
const displayOption_1 = require("./displayOption");
const errorDetail_1 = require("./errorDetail");
const iFrameActionBody_1 = require("./iFrameActionBody");
const integratorCardPayloadResponse_1 = require("./integratorCardPayloadResponse");
const integratorObjectResult_1 = require("./integratorObjectResult");
const modelError_1 = require("./modelError");
const objectToken_1 = require("./objectToken");
const topLevelActions_1 = require("./topLevelActions");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "ActionHookActionBody.TypeEnum": actionHookActionBody_1.ActionHookActionBody.TypeEnum,
    "ActionHookActionBody.HttpMethodEnum": actionHookActionBody_1.ActionHookActionBody.HttpMethodEnum,
    "CardDisplayProperty.DataTypeEnum": cardDisplayProperty_1.CardDisplayProperty.DataTypeEnum,
    "CardObjectTypeBody.NameEnum": cardObjectTypeBody_1.CardObjectTypeBody.NameEnum,
    "DisplayOption.TypeEnum": displayOption_1.DisplayOption.TypeEnum,
    "IFrameActionBody.TypeEnum": iFrameActionBody_1.IFrameActionBody.TypeEnum,
    "IntegratorCardPayloadResponse.ResponseVersionEnum": integratorCardPayloadResponse_1.IntegratorCardPayloadResponse.ResponseVersionEnum,
    "ObjectToken.DataTypeEnum": objectToken_1.ObjectToken.DataTypeEnum,
};
let typeMap = {
    "ActionConfirmationBody": actionConfirmationBody_1.ActionConfirmationBody,
    "ActionHookActionBody": actionHookActionBody_1.ActionHookActionBody,
    "CardActions": cardActions_1.CardActions,
    "CardCreateRequest": cardCreateRequest_1.CardCreateRequest,
    "CardDisplayBody": cardDisplayBody_1.CardDisplayBody,
    "CardDisplayProperty": cardDisplayProperty_1.CardDisplayProperty,
    "CardFetchBody": cardFetchBody_1.CardFetchBody,
    "CardFetchBodyPatch": cardFetchBodyPatch_1.CardFetchBodyPatch,
    "CardListResponse": cardListResponse_1.CardListResponse,
    "CardObjectTypeBody": cardObjectTypeBody_1.CardObjectTypeBody,
    "CardPatchRequest": cardPatchRequest_1.CardPatchRequest,
    "CardResponse": cardResponse_1.CardResponse,
    "DisplayOption": displayOption_1.DisplayOption,
    "ErrorDetail": errorDetail_1.ErrorDetail,
    "IFrameActionBody": iFrameActionBody_1.IFrameActionBody,
    "IntegratorCardPayloadResponse": integratorCardPayloadResponse_1.IntegratorCardPayloadResponse,
    "IntegratorObjectResult": integratorObjectResult_1.IntegratorObjectResult,
    "ModelError": modelError_1.ModelError,
    "ObjectToken": objectToken_1.ObjectToken,
    "TopLevelActions": topLevelActions_1.TopLevelActions,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
