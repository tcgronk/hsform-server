"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./batchInputSubscriptionBatchUpdateRequest"));
__export(require("./batchResponseSubscriptionResponse"));
__export(require("./batchResponseSubscriptionResponseWithErrors"));
__export(require("./errorDetail"));
__export(require("./modelError"));
__export(require("./settingsChangeRequest"));
__export(require("./settingsResponse"));
__export(require("./subscriptionBatchUpdateRequest"));
__export(require("./subscriptionCreateRequest"));
__export(require("./subscriptionListResponse"));
__export(require("./subscriptionPatchRequest"));
__export(require("./subscriptionResponse"));
__export(require("./throttlingSettings"));
const batchInputSubscriptionBatchUpdateRequest_1 = require("./batchInputSubscriptionBatchUpdateRequest");
const batchResponseSubscriptionResponse_1 = require("./batchResponseSubscriptionResponse");
const batchResponseSubscriptionResponseWithErrors_1 = require("./batchResponseSubscriptionResponseWithErrors");
const errorDetail_1 = require("./errorDetail");
const modelError_1 = require("./modelError");
const settingsChangeRequest_1 = require("./settingsChangeRequest");
const settingsResponse_1 = require("./settingsResponse");
const subscriptionBatchUpdateRequest_1 = require("./subscriptionBatchUpdateRequest");
const subscriptionCreateRequest_1 = require("./subscriptionCreateRequest");
const subscriptionListResponse_1 = require("./subscriptionListResponse");
const subscriptionPatchRequest_1 = require("./subscriptionPatchRequest");
const subscriptionResponse_1 = require("./subscriptionResponse");
const throttlingSettings_1 = require("./throttlingSettings");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "BatchResponseSubscriptionResponse.StatusEnum": batchResponseSubscriptionResponse_1.BatchResponseSubscriptionResponse.StatusEnum,
    "BatchResponseSubscriptionResponseWithErrors.StatusEnum": batchResponseSubscriptionResponseWithErrors_1.BatchResponseSubscriptionResponseWithErrors.StatusEnum,
    "SubscriptionCreateRequest.EventTypeEnum": subscriptionCreateRequest_1.SubscriptionCreateRequest.EventTypeEnum,
    "SubscriptionResponse.EventTypeEnum": subscriptionResponse_1.SubscriptionResponse.EventTypeEnum,
    "ThrottlingSettings.PeriodEnum": throttlingSettings_1.ThrottlingSettings.PeriodEnum,
};
let typeMap = {
    "BatchInputSubscriptionBatchUpdateRequest": batchInputSubscriptionBatchUpdateRequest_1.BatchInputSubscriptionBatchUpdateRequest,
    "BatchResponseSubscriptionResponse": batchResponseSubscriptionResponse_1.BatchResponseSubscriptionResponse,
    "BatchResponseSubscriptionResponseWithErrors": batchResponseSubscriptionResponseWithErrors_1.BatchResponseSubscriptionResponseWithErrors,
    "ErrorDetail": errorDetail_1.ErrorDetail,
    "ModelError": modelError_1.ModelError,
    "SettingsChangeRequest": settingsChangeRequest_1.SettingsChangeRequest,
    "SettingsResponse": settingsResponse_1.SettingsResponse,
    "SubscriptionBatchUpdateRequest": subscriptionBatchUpdateRequest_1.SubscriptionBatchUpdateRequest,
    "SubscriptionCreateRequest": subscriptionCreateRequest_1.SubscriptionCreateRequest,
    "SubscriptionListResponse": subscriptionListResponse_1.SubscriptionListResponse,
    "SubscriptionPatchRequest": subscriptionPatchRequest_1.SubscriptionPatchRequest,
    "SubscriptionResponse": subscriptionResponse_1.SubscriptionResponse,
    "ThrottlingSettings": throttlingSettings_1.ThrottlingSettings,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
